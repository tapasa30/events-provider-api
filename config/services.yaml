# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

imports:
    - { resource: 'clients/' }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/Kernel.php'
            - '../src/Infrastructure/Client/'

    _instanceof:
        App\Domain\Service\EventProviderInterface:
            tags: [app.event_provider]

        App\Domain\Command\CommandHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: command.bus }

        App\Domain\Query\QueryHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: query.bus }

    App\Domain\Cache\EventsListResponseCacheInterface: '@App\Infrastructure\Cache\Redis\EventsListResponseResponseCache'
    App\Domain\Repository\EventRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\EventDoctrineRepository'
    App\Domain\Repository\ZoneRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\ZoneDoctrineRepository'

    App\Infrastructure\CLI\Symfony\SynchronizeProviderEventsSymfonyCommand:
        arguments:
            $eventProviders: !tagged_iterator { tag: app.event_provider, index_by: key }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
